---

- name: add sudo no password permission
  lineinfile: dest=/etc/sudoers regexp='^{{common.user_apigateway}} ALL=NOPASSWD:ALL' line='{{common.user_apigateway}} ALL=NOPASSWD:ALL'
  sudo: yes 
  tags:
    - zookeeper_uninstall

- stat: path=/opt/{{common.user_apigateway}}/zookeeper/
  register: p
  tags:
    - zookeeper_uninstall
    - stop_zookeeper

- name: restart crontab
  shell: service cron stop
  when:  p.stat.isdir is defined and p.stat.isdir  
  sudo: yes 
  tags:
    - stop_zookeeper
  
- name: zookeeper stop
  shell: sh stop_zookeeper.sh
  when:  p.stat.isdir is defined and p.stat.isdir
  ignore_errors: true
  args:
    chdir: '/opt/{{common.user_apigateway}}/zookeeper/bin'
  tags:
    - zookeeper_uninstall
    - stop_zookeeper

- name: uninstall zookeeper
  shell: sh /opt/{{common.user_apigateway}}/zookeeper/install/zookeeper_uninstall.sh
  when:  p.stat.isdir is defined and p.stat.isdir
  ignore_errors: true
  tags:
    - zookeeper_uninstall

- name: create log dir
  sudo: yes
  file: path={{common.apigateway_log}} state=directory owner={{ansible_ssh_user}} group={{ansible_ssh_user}} mode=700  
 
- name: upload zookeeper install package
  copy: src={{zookeeper.pkg_dir}}/{{zookeeper.pkg_name}} dest=/opt/{{common.user_apigateway}} force=yes

- name: remove install dir
  file: path=/opt/{{common.user_apigateway}}/zookeeper state=absent
  sudo: yes 
 
- name: untar zookeeper install package
  unarchive: src=/opt/{{common.user_apigateway}}/{{zookeeper.pkg_name}} dest=/opt/{{common.user_apigateway}}  copy=no
  
- name: set executable permissions
  shell: chmod  +x  /opt/{{common.user_apigateway}}/zookeeper/install/*.sh ; chmod  +x  /opt/{{common.user_apigateway}}/zookeeper/bin/*.sh
  
- name: config zookeeper service user
  lineinfile: dest=/opt/{{common.user_apigateway}}/zookeeper/install/zookeeper_install.cfg regexp='^SERVICE_USER=' line='SERVICE_USER={{common.user_apigateway}}'

- name: config zookeeper machine NO.
  lineinfile: dest=/opt/{{common.user_apigateway}}/zookeeper/install/zookeeper_install.cfg regexp='^NUMBER=' line='NUMBER={{local_id}}'
  
- name: config zookeeper port
  lineinfile: dest=/opt/{{common.user_apigateway}}/zookeeper/install/zookeeper_install.cfg regexp='^PORT=' line='PORT={{common.zookeeper_client_port}}'
  
- name: config zookeeper package name
  lineinfile: dest=/opt/{{common.user_apigateway}}/zookeeper/install/zookeeper_install.cfg regexp='^FILE_NAME=' line='FILE_NAME={{zookeeper.pkg_zookeeper_name}}'
  
- name: config zookeeper  bind address
  lineinfile: dest=/opt/{{common.user_apigateway}}/zookeeper/install/zookeeper_install.cfg regexp='^LOCALIP=' line='LOCALIP={{ansible_ssh_host}}'  
  when: "'{{IS_STANDBY|default()}}'!='Y'"
  
- name: config zookeeper  bind address
  lineinfile: dest=/opt/{{common.user_apigateway}}/zookeeper/install/zookeeper_install.cfg regexp='^LOCALIP=' line='LOCALIP={{ip_address_mask.split('/')[0]}}'  
  when: "'{{IS_STANDBY|default()}}'=='Y'"
  
- name: config zookeeper server list
  lineinfile: dest=/opt/{{common.user_apigateway}}/zookeeper/install/zookeeper_install.cfg  regexp='^SERVERINFO=' line='SERVERINFO="{%for ip in zookeeper.ips %}         server.{{loop.index0}}={{ip}}:{{zookeeper.server_ports[0]}}:{{zookeeper.server_ports[1]}}\\n {% endfor %}"'
  
- name: dos2unix
  shell: dos2unix  *.*
  args:
    chdir: '/opt/{{common.user_apigateway}}/zookeeper/install'
  
- name: install
  shell: sh zookeeper_install.sh 
  args:
    chdir: '/opt/{{common.user_apigateway}}/zookeeper/install'

# config arb 
- name: config arb
  when: "'{{IS_STANDBY|default()}}'=='Y'"
  include: ./config_arb.yml  

- name: remove zookeeper package
  shell: rm -rf /opt/{{common.user_apigateway}}/{{zookeeper.pkg_name}}

- name: delete sudo NOPASSWORD 
  shell: sed -i "/{{common.user_apigateway}} ALL=NOPASSWD:ALL/d" /etc/sudoers
  sudo: yes
  tags:
    - zookeeper_uninstall

- name: restart crontab
  shell: service cron restart
  sudo: yes

- name: restart
  shell: sh monitor_zookeeper.sh restart
  args:
    chdir: '/opt/{{common.user_apigateway}}/zookeeper/bin'  
  tags:
    - zookeeper_restart
